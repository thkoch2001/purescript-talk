#+TITLE: PureScript
#+AUTHOR: Thomas Koch
#+EMAIL: koch@comsolit.com
* Typen, Haskell, Purescript
** Testen: Du kannst nur verlieren

a) Toll, mein Test hat einen Bug gefunden! :-(

b) Meine Tests konnten die Bugs nicht finden... :-(

** Tests

testen, dass ein Programm bestimmte
fehlerhafte Eigenschaften nicht hat

** Ich brauche Beweise!

- Typsysteme sind Beweissysteme
- Typen sind Theoreme über Programmteile

** Beispiel 1

#+BEGIN_SRC haskell
? :: a -> a
#+END_SRC

** Beispiel 1

#+BEGIN_SRC haskell
id :: a -> a
id x = x
#+END_SRC

** Beispiel 2

#+BEGIN_SRC haskell
f :: List a -> List a
f x y = ...
#+END_SRC

*** COMMENT
- f kann nur Elemente aus x unverändert zurückgeben

** Literatur

Theorems for free!
Philip Wadler
Juni 1989

** Typen sind Dokumentation

#+BEGIN_SRC haskell
? :: (a -> b) -> List a -> Map b (List a)
#+END_SRC

** Sprachen mit gutem Type System

- Haskell
- OCaml
- Idris
- ...
- NICHT Java!

** Haskell

- Verbreitung
- Bibliotheken/Tools
- Uni Konstanz

** Wie Schön!

... JavaScript
... PHP

:-(((

** PureScript

Haskell-Dialekt -> JavaScript

wie: Coffeescript, Dart, Typescript,
GWT, ClojureScript, ...

[[https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS][github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS]]

** PureScript von JavaScript

CommonJS Module!

#+BEGIN_SRC javascript
var myModule = require('MyModule');

myModule.partition(isPrim)([1, 2, 3, 4, 5]);
#+END_SRC

** JavaScript von PureScript - einfach

#+BEGIN_SRC haskell
foreign import encodeURIComponent :: String -> String

x = encodeURIComponent "Hello World"

-- x == "Hello%20World"
#+END_SRC

** JavaScript von PureScript - komplex

#+BEGIN_SRC haskell
foreign import arrayLength
  """function arrayLength(arr) {
       return arr.length;
     };
  """ :: forall a. [a] -> Int
#+END_SRC

** PHP?

- Lua: [[https://github.com/osa1/psc-lua][github.com/osa1/psc-lua]]
- Python: [[https://github.com/purescript/purescript/issues/591][github.com/purescript/purescript/issues/591]]
- PHP: [[https://github.com/purescript/purescript/issues/612][github.com/purescript/purescript/issues/612]]

* stuff
** "The JavaScript Problem"

1. JavaScript sucks.
2. It's the only browser-language.

** JavaScript, das neue Assembler

- Coffeescript
- Dart: Google
- Typescript, Microsoft
- GWT (Java)
- ClojureScript (lisp)

plus 742 Trillionen:
[[https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS][github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS]]

** Auswahlkriterien

- exzellentes Typsystem
- schrittweises Einführen in legacy Projekte
- ROI des Lernaufwandes

** Warum ist ein (gutes) Typsystem wichtig?

*** Beispielproblem: Liste Partitionieren (group by)

| Name   | Hans | Lisa | Tom | Susi | Peter |
| Kanton | TG   | ZH   | SG  | TG   | ZH    |

Partitioniert nach Kanton:

- SG: Tom
- TG: Hans, Susi
- ZH: Lisa, Peter

*** Mehr Typen → weniger Tests

#+BEGIN_SRC php
/**
 * @param callable/string $criterion by which to partition
 * @param traversable $traversable decidable by $criterion
 * @return array[partitionKey -> partitionElements]
 */
function arrayPartition($criterion, $traversable);

// Tests that wouldn't be necessary with a Type System!
function testThrowsForBadCriterion();
function testThrowsForBadTraversable();
function testReturnsMapOfArrays();
#+END_SRC

*** partition in Haskell

#+BEGIN_SRC haskell
partition :: (a -> b) -> List a -> Map b [a]
#+END_SRC

+ Gratis Dokumentation!


** rest
- Code ist da, um von Menschen gelesen zu werden
- weniger Code schreiben, Ideen nur einmal schreiben
- keine Überraschungen, keine versteckten Seiteneffekte, keine Abhängigkeit von globalen Variablen

- Java hat kein gutes Typsystem
- weniger Tests, mehr Sicherheit
- "make illegal states unrepresentable"
- "if the only type systems I knew were C, C++, Java, or Go's,
  I'd be a Ruby programmer too."
- reasoning, Schlußfolgern
- type inference: schnell entwerfen, dann absichern

** Functor nicht möglich in Java

ghci> :info Functor
class Functor f where
  fmap :: (a -> b) -> f a -> f b
  ...
ghci> fmap (*2) [1,2,3]
[2,4,6]
ghci> fmap reverse getLine
foo
"oof"

Java:

interface Functor<F> {
  <A, B> F<B> fmap(Function<A, B> f, F<A> a);
}

** Beispiele für Sprachen mit modernen Typsystemen:

- Agda, Idris, Coq
- Haskell, Purescript
- OCaml

** Was ist ein gutes Typsystem?

- Summentypen (OR), z.B. Either[Failure|Success]
- Pattern matching
- Produkttypen (AND): records, objects, tuples
- Parametric Polymorphism
  - PHP kann nur array

** Schönes an funktionalen Sprachen

- immutability, kein State:
  $datetime = new DateTime("now")
  $x = $scheduler->getNextRunTime($datetime);
  $datetime = ?
- partial application

